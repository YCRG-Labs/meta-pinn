[tool:pytest]
# Pytest configuration for ML Research Pipeline

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Output options
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings
    --cov=ml_research_pipeline
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-report=term-missing
    --cov-fail-under=80
    --junitxml=test-results.xml

# Markers for test categorization
markers =
    unit: Unit tests for individual components
    integration: Integration tests for component interactions
    physics: Tests for physics validation and constraints
    meta_learning: Tests for meta-learning algorithms
    bayesian: Tests for Bayesian uncertainty quantification
    neural_operators: Tests for neural operator implementations
    physics_discovery: Tests for physics discovery components
    evaluation: Tests for evaluation and benchmarking
    distributed: Tests for distributed training
    performance: Performance and regression tests
    slow: Tests that take a long time to run
    gpu: Tests that require GPU
    fenicsx: Tests that require FEniCSx installation

# Minimum version requirements
minversion = 6.0

# Test timeout (in seconds)
timeout = 300

# Ignore certain warnings
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::FutureWarning

# Coverage configuration
[coverage:run]
source = ml_research_pipeline
omit = 
    */tests/*
    */test_*.py
    */__pycache__/*
    */venv/*
    */env/*
    setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov